<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BensiEgils â€“ Azure</title>
    <link>http://localhost:1313/bensiegils/categories/azure/</link>
    <description>Recent content in Azure on BensiEgils</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Aug 2025 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/bensiegils/categories/azure/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Migrating from VMware to Azure using Azure Files</title>
      <link>http://localhost:1313/bensiegils/posts/2025-08-19-move-vmware-azure/</link>
      <pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/bensiegils/posts/2025-08-19-move-vmware-azure/</guid>
      <description>
        
        
        &lt;p&gt;When using a tool such as Disk2VHD, you need a storage locationâ€”and sometimes plenty of itâ€”to export the virtual machine (VM).
But what if no local storage is available, and no USB can be connected, such as with a VMware hosting provider?&lt;/p&gt;
&lt;p&gt;In that case, you can export the VHD directly to an Azure File Share and then copy it to Azure Blob Storage.
Note: Dynamically expanding disks are not supported in this processâ€”you must use a fixed-size disk.&lt;/p&gt;
&lt;p&gt;The next step is to provision a Windows Server in Azure, install Hyper-V, and use Hyper-V Manager to convert the disk to a fixed-size VHD.&lt;/p&gt;
&lt;p&gt;After conversion, you can upload the VHD to Azure, create an image from it, and then deploy a VM.
In many cases, Azure will display an error during deployment stating that the VM cannot be customized. You can safely ignore this error.&lt;/p&gt;
&lt;p&gt;Tools You Will Need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disk2VHD â€“ for exporting the VMware VM to a VHD file.
&lt;ul&gt;
&lt;li&gt;ðŸ”— Download Disk2VHD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Azure Storage Explorer â€“ for managing Azure File Shares and Blob Storage.
&lt;ul&gt;
&lt;li&gt;ðŸ”— Download Azure Storage Explorer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hyper-V Manager â€“ for converting VHDs from dynamic to fixed-size.
&lt;ul&gt;
&lt;li&gt;Installed on VM in Azure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Mount Azure File Share&lt;/p&gt;
&lt;p&gt;On the source VMware server and later on the Hyper-V server in Azure, mount the Azure File Share:
Mount as Administrator because disk2vhd runs as Administrator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/vmwaremove/blob.png&#34; alt=&#34;Mount Azure File Share&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Export VMware VM with Disk2VHD&lt;/p&gt;
&lt;p&gt;Run Disk2VHD on the source server.&lt;/p&gt;
&lt;p&gt;Select the volumes you want to export.&lt;/p&gt;
&lt;p&gt;Choose the Azure File Share as the destination path (after mounting it as a network drive).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/vmwaremove/disk2vhd1.png&#34; alt=&#34;Disk2VHD Export&#34;  loading=&#34;lazy&#34; /&gt;
&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/vmwaremove/uncheck.png&#34; alt=&#34;Disk2VHD Uncheck&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Convert VHD from Dynamic to Fixed&lt;/p&gt;
&lt;p&gt;Open Hyper-V Manager on the Azure VM.&lt;/p&gt;
&lt;p&gt;Go to Edit Diskâ€¦&lt;/p&gt;
&lt;p&gt;Browse to the VHD file from the Azure File Share.&lt;/p&gt;
&lt;p&gt;Select Convert â†’ Fixed size.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/vmwaremove/fxiedsize.png&#34; alt=&#34;Fixed Size VHD&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Step 4: Copy VHD to Azure Blob Storage&lt;/p&gt;
&lt;p&gt;Use Azure Storage Explorer ( Use copy and paste in the menu :) )&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/vmwaremove/storageexplorer.png&#34; alt=&#34;Azure Storage Explorer&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Step 5: Create Azure Managed Image &amp;amp; VM&lt;/p&gt;
&lt;p&gt;In the Azure Portal, go to Images â†’ + Create.&lt;/p&gt;
&lt;p&gt;Select your uploaded VHD as the source.&lt;/p&gt;
&lt;p&gt;Create an image.&lt;/p&gt;
&lt;p&gt;Deploy a VM from that image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/vmwaremove/azimagecreate.png&#34; alt=&#34;Azure Image Create&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now you can create vm from the image.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Arc - Diskspace Monitoring - Teams)</title>
      <link>http://localhost:1313/bensiegils/posts/2023-10-15-outofdiskspace-teams/</link>
      <pubDate>Sun, 15 Oct 2023 02:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/bensiegils/posts/2023-10-15-outofdiskspace-teams/</guid>
      <description>
        
        
        &lt;p&gt;Monitor disk space usage on Azure Arc-enabled servers and receive instant Microsoft Teams notifications when space is running low.&lt;/p&gt;
&lt;h2&gt;Azure Arc Disk Space Monitoring&lt;span class=&#34;hx:absolute hx:-mt-20&#34; id=&#34;azure-arc-disk-space-monitoring&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#azure-arc-disk-space-monitoring&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Upon successfully installing Azure Arc on your Server and activating Insights, you open the door to a powerful monitoring capability. One essential aspect is overseeing disk space usage on your server, ensuring optimal performance and preventing potential issues. This example provides a step-by-step guide on how to set up disk space monitoring and receive instant notifications via Microsoft Teams when space is running low.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Furthermore, this versatile approach can be extended to send email alerts, providing an additional layer of flexibility in how you manage critical resource thresholds. This comprehensive monitoring strategy empowers you with the tools to proactively maintain your server&amp;rsquo;s health and responsiveness, bolstering the reliability of your operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The query below is a simple example of how to monitor disk space usage on your server. It returns the percentage of free space on the C: drive, which is then used to trigger an alert when the threshold is exceeded. The query can be customized to monitor other drives on your server, and the threshold can be adjusted to suit your needs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;InsightsMetrics 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| where Name == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FreeSpaceMB&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| summarize arg_max(TimeGenerated, *) by Tags, Computer 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| extend Drive = tostring(parse_json(Tags)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vm.azm.ms/mountId&amp;#34;&lt;/span&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| extend Size = toreal(parse_json(Tags)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vm.azm.ms/diskSizeMB&amp;#34;&lt;/span&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| project TimeGenerated, Computer, Drive, bin(SizeGB = Size / &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;), bin(FreeGB = Val / &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| join kind=inner (InsightsMetrics 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | where Name == &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FreeSpacePercentage&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | summarize arg_max(TimeGenerated, *) by Tags, Computer 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | extend Drive = tostring(parse_json(Tags)[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vm.azm.ms/mountId&amp;#34;&lt;/span&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; | project TimeGenerated, Computer, Drive, bin(FreePercent = Val, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;))on Computer, Drive 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| project TimeGenerated, Computer, Drive, SizeGB, FreeGB, FreePercent 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| where FreePercent &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;90.0&lt;/span&gt; //
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//| where FreeGB &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| order by Computer asc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We need to enable webhooks in Microsoft Teams and copy the webhook URL. Finally, we need to create Azure automation runbook and configure it to send notifications to the channel.
We also need to enable the Azure Automation account to access the Log Analytics workspace. To do this, we need to give automation account read access to the Log Analytics workspace and resource group where the arc servers are located.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the runbook code is the following:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# So we are going to use the same query as in Azure Monitor to get the results and send it to Teams&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Connect to Azure for Log Analytics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connect-AzAccount -Identity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$context = Set-AzContext -Subscription &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your Subscription Name&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$workspaceName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arc-servers&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$workspaceRG = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arc-servers&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$WorkspaceID = (Get-AzOperationalInsightsWorkspace -Name $workspaceName -ResourceGroupName $workspaceRG).CustomerID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$query = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InsightsMetrics
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| where Name == &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FreeSpaceMB&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| summarize arg_max(TimeGenerated, *) by Tags, Computer 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| extend Drive = tostring(parse_json(Tags)[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vm.azm.ms/mountId&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| extend Size = toreal(parse_json(Tags)[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vm.azm.ms/diskSizeMB&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| project TimeGenerated, Computer, Drive, bin(SizeGB = Size / 1024, 0.1), bin(FreeGB = Val / 1024, 1) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| join kind=inner (InsightsMetrics 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; | where Name == &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FreeSpacePercentage&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; | summarize arg_max(TimeGenerated, *) by Tags, Computer 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; | extend Drive = tostring(parse_json(Tags)[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vm.azm.ms/mountId&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;`&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; | project TimeGenerated, Computer, Drive, bin(FreePercent = Val, 1.1))on Computer, Drive 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| project TimeGenerated, Computer, Drive, SizeGB, FreeGB, FreePercent 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| where FreePercent &amp;lt;= 90.0 //
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;//| where FreeGB &amp;lt;= 10.0 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;| order by Computer asc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$kqlQuery = Invoke-AzOperationalInsightsQuery -WorkspaceId $WorkspaceID -Query $query
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$webhookUri = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your webhook url&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Define the message as a PowerShell object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$message = @{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    context   = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schema.org/extensions&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type      = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MessageCard&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    themeColor = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d70000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title      = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Machine with low disk space&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$($kqlQuery.results | Format-List | Out-String)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Convert the message to JSON&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$jsonMessage = $message | ConvertTo-Json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Send the message using Invoke-RestMethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Invoke-RestMethod -Method Post -ContentType &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt; -Body $jsonMessage -Uri $webhookUri&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select create alert rule
&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/AzureMonitor.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new alert rule
&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/Create_an_alert_rule.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create action group
&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/Action_Group.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the runbook with teams notification that we create before&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the result in teams
&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/diskalert_teams.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
    <item>
      <title>Azure Arc - (Azure Cli - ssh - rdp)</title>
      <link>http://localhost:1313/bensiegils/posts/2023-10-08-azurearc-ssh/</link>
      <pubDate>Sun, 08 Oct 2023 02:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/bensiegils/posts/2023-10-08-azurearc-ssh/</guid>
      <description>
        
        
        &lt;p&gt;If you have deployed Azure Arc, you have the option to utilize Windows Admin Center for Windows Machines. Additionally, you can enable the OpenSSH Extension on Windows Server, granting the capability to establish SSH tunnels to the localhost or other machines that support RDP/SSH connections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/SSH-Tunnel.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To begin the process, please follow these steps:&lt;/p&gt;
&lt;p&gt;Ensure that you have the Azure CLI installed on your local computer. If it is not already installed, open PowerShell and execute the command: winget install -e &amp;ndash;id Microsoft.AzureCLI.&lt;/p&gt;
&lt;p&gt;If you are using a different operating system, refer to the official guide on how to install the Azure CLI provided by Microsoft Learn:
&lt;a href=&#34;https://learn.microsoft.com/en-us/cli/azure/install-azure-cli&#34;target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to install the Azure CLI | Microsoft Learn.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, enable the OpenSSH extension on the VM where Azure Arc is deployed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/Enable-SSH.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/Settings-Extensions.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logon to Azure With Azure CLi&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PS C:\&amp;gt; az login&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Please use Multi-Factor Authentication for added security.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The we go to the Connect settings and select password authentication on the VM
&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/Connect_string.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Copy the connect string and paste to Powershell and add &amp;ldquo;-L 3333:192.168.x.x:3389&amp;rdquo; the ip of the host you want to connect to.&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az ssh arc --subscription &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;asdfasdfadf-adfadsfadsf-sdfc&amp;#34;&lt;/span&gt; --resource-group &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Arc-Servers&amp;#34;&lt;/span&gt; --name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HYPER-01&amp;#34;&lt;/span&gt; --local-user &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;administrator&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-L 3333:192.168.81.25:3389&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/RDP_Session1.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/bensiegils/assets/img/blog/RDP_Session2.png&#34; alt=&#34;Desktop View&#34;  loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And you are connect over SSH tunnel with RDP.&lt;/p&gt;
      </description>
    </item>
    
  </channel>
</rss>
